// Calling `pwsh` first leverages my personal $PROFILE to activate `.venv`.
// Alternatively, we could use `.venv/Scripts/python.exe` and change the `args`, but
// this is platform-specific anyways.

{
  "version": "2.0.0",
  "inputs": [
    // * -------------------------------------------------------------------------- * //
    // * Changes below should persist in significant template updates.

    {
      "id": "stage",
      "type": "pickString",
      "description": "stage",
      "default": "",
      "options": [
        "",
        "build_docs",
        "preview_binarized",
        "preview_gray",
        "find_contours",
        "fill",
        "preview_filled",
        "find_unobstructed",
        "find_tracks",
        "compare_theory"
      ]
    },
    {
      "id": "preview",
      "type": "pickString",
      "description": "preview",
      "default": "",
      "options": ["gray", "binarized", "filled", "composite"]
    },
    {
      "id": "version",
      "type": "promptString",
      "description": "version",
      "default": "0.0.1"
    },

    // * -------------------------------------------------------------------------- * //
    // * Changes below may be lost in significant template updates.

    {
      "id": "templateOptions",
      "description": "Template options.",
      "type": "pickString",
      "options": [
        "",
        "-Defaults",
        "-Recopy",
        "-Recopy -Defaults",
        "-Defaults -NoVerify",
        "-Recopy -NoVerify",
        "-Recopy -Defaults -NoVerify"
      ]
    }
  ],
  "tasks": [
    // * -------------------------------------------------------------------------- * //
    // * Changes below should persist in significant template updates.

    {
      "label": "proj: update boilercore",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": ".tools/scripts/Update-Boilercore.ps1",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "proj: local pyrightconfig",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python .tools/scripts/local_pyrightconfig.py",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "proj: hide notebook inputs",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python -m boilercv.docs",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "proj: Run file PREVIEW/WRITE",
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": {
          "BOILERCV_PREVIEW": "True",
          "BOILERCV_WRITE": "True"
        }
      },
      "command": "python ${file}",
      "icon": { "id": "repo" },
      "problemMatcher": []
    },
    {
      "label": "proj: Run file DEBUG/PREVIEW/WRITE",
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": {
          "BOILERCV_DEBUG": "True",
          "BOILERCV_PREVIEW": "True",
          "BOILERCV_WRITE": "True"
        }
      },
      "command": "python ${file}",
      "icon": { "id": "repo" },
      "problemMatcher": []
    },
    {
      "label": "proj: Run file PREVIEW",
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": { "BOILERCV_PREVIEW": "True" }
      },
      "command": "python ${file}",
      "icon": { "id": "repo" },
      "problemMatcher": []
    },
    {
      "label": "proj: Run file WRITE",
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": { "BOILERCV_WRITE": "True" }
      },
      "command": "python ${file}",
      "icon": { "id": "repo" },
      "problemMatcher": []
    },
    {
      "label": "proj: preview",
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": { "BOILERCV_PREVIEW": "True" }
      },
      "command": "python -m boilercv.previews.${input:preview}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro build docs",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "dvc repro build_docs",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro (debug)",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": { "BOILERCV_DEBUG": "True" }
      },
      "command": "dvc repro ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro force (debug)",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": {
        "shell": { "executable": "pwsh", "args": ["-Command"] },
        "env": { "BOILERCV_DEBUG": "True" }
      },
      "command": "dvc repro --force ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "dvc repro ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro force",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "dvc repro --force ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: dag",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: pre-repro"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "(dvc dag --md) -Replace 'mermaid', '{mermaid}' > docs/dag.md && . '~/.local/nodeenvs/markdownlint/Scripts/Activate.ps1' && markdownlint --fix docs/dag.md",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: pre-repro",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python -m boilercv.pre_repro",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * WSL-SPECIFIC * //

    {
      "label": "wsl: Copy PID of Python Debugger",
      "type": "shell",
      "command": "ps aux | grep python | grep --max-count 1 -- --adapter-access-token | grep --only-matching --perl-regexp 'user\\s+\\d+' | grep --only-matching --perl-regexp '\\d+' | clip.exe",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "close": false,
        "focus": true,
        "reveal": "always"
      },
      "icon": { "id": "terminal-linux" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * Changes below may be lost in significant template updates.

    // * -------------------------------------------------------------------------- * //
    // * PROJECT SETUP * //

    {
      "label": "setup: Copy template",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": ".tools/scripts/Copy-Template.ps1 ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Setup project",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "setup.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Update project",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "update.ps1",
      "icon": { "id": "file-symlink-directory" },
      // "runOptions": {
      //   "runOn": "folderOpen"
      // },
      "problemMatcher": []
    },
    {
      "label": "setup: Perform first-time setup",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "first_time_setup.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Remove *.rej",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "Get-ChildItem -Recurse -Filter *.rej | Remove-Item",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PRE-COMMIT * //

    {
      "label": "pre-commit",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pre-commit",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },
    {
      "label": "pre-commit: all",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pre-commit run --all-files",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * GIT * //

    {
      "label": "git: Rebase back to fork",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "git rebase -i --fork-point main",
      "icon": { "id": "git-branch" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * BLACK * //

    {
      "label": "black: Ignore magic comma in this file",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "black -C ${file}",
      "icon": { "id": "code" },
      "problemMatcher": []
    },
    {
      "label": "black: Ignore magic comma in all project files",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "black -C src tests",
      "icon": { "id": "code" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * OTHER TASKS * //

    {
      "label": "task: format and clear notebook",
      "dependsOrder": "sequence",
      "dependsOn": ["task: format notebook"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "nbqa ruff --fix-only ${file}; nb-clean clean --remove-empty-cells --preserve-cell-metadata special tags -- ${file}; black ${file}",
      "icon": { "id": "notebook" },
      "problemMatcher": []
    },
    {
      "label": "task: Run pytest with coverage",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pytest --cov --cov-report xml",
      "icon": { "id": "type-hierarchy-sub" },
      "problemMatcher": []
    },
    {
      "label": "task: run core update",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python .tools/scripts/core_update.py",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "task: Invoke pyright",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": ".tools/scripts/Invoke-Pyright.ps1",
      "icon": { "id": "type-hierarchy-sub" },
      "problemMatcher": []
    },
    {
      "label": "task: sphinx-autobuild docs (preview)",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "sphinx-build -Ean docs _site; sphinx-autobuild -n docs _site --watch **/*.md",
      "icon": { "id": "book" },
      "problemMatcher": []
    },
    {
      "label": "task: profile this file",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python -m cProfile -o .prof ${file}",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: view profile results with snakeviz",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "snakeviz .prof",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: autoflake current file",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "autoflake -i --remove-all-unused-imports --ignore-init-module-imports ${file}",
      "icon": { "id": "code" },
      "problemMatcher": []
    }
  ]
}
